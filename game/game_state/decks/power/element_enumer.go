// Code generated by "enumer -type=Element"; DO NOT EDIT.

package power

import (
	"fmt"
	"strings"
)

const _ElementName = "SunMoonFireAirWaterEarthNatureAnimal"

var _ElementIndex = [...]uint8{0, 3, 7, 11, 14, 19, 24, 30, 36}

const _ElementLowerName = "sunmoonfireairwaterearthnatureanimal"

func (i Element) String() string {
	if i < 0 || i >= Element(len(_ElementIndex)-1) {
		return fmt.Sprintf("Element(%d)", i)
	}
	return _ElementName[_ElementIndex[i]:_ElementIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ElementNoOp() {
	var x [1]struct{}
	_ = x[Sun-(0)]
	_ = x[Moon-(1)]
	_ = x[Fire-(2)]
	_ = x[Air-(3)]
	_ = x[Water-(4)]
	_ = x[Earth-(5)]
	_ = x[Plant-(6)]
	_ = x[Animal-(7)]
}

var _ElementValues = []Element{Sun, Moon, Fire, Air, Water, Earth, Plant, Animal}

var _ElementNameToValueMap = map[string]Element{
	_ElementName[0:3]:        Sun,
	_ElementLowerName[0:3]:   Sun,
	_ElementName[3:7]:        Moon,
	_ElementLowerName[3:7]:   Moon,
	_ElementName[7:11]:       Fire,
	_ElementLowerName[7:11]:  Fire,
	_ElementName[11:14]:      Air,
	_ElementLowerName[11:14]: Air,
	_ElementName[14:19]:      Water,
	_ElementLowerName[14:19]: Water,
	_ElementName[19:24]:      Earth,
	_ElementLowerName[19:24]: Earth,
	_ElementName[24:30]:      Plant,
	_ElementLowerName[24:30]: Plant,
	_ElementName[30:36]:      Animal,
	_ElementLowerName[30:36]: Animal,
}

var _ElementNames = []string{
	_ElementName[0:3],
	_ElementName[3:7],
	_ElementName[7:11],
	_ElementName[11:14],
	_ElementName[14:19],
	_ElementName[19:24],
	_ElementName[24:30],
	_ElementName[30:36],
}

// ElementString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ElementString(s string) (Element, error) {
	if val, ok := _ElementNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ElementNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Element values", s)
}

// ElementValues returns all values of the enum
func ElementValues() []Element {
	return _ElementValues
}

// ElementStrings returns a slice of all String values of the enum
func ElementStrings() []string {
	strs := make([]string, len(_ElementNames))
	copy(strs, _ElementNames)
	return strs
}

// IsAElement returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Element) IsAElement() bool {
	for _, v := range _ElementValues {
		if i == v {
			return true
		}
	}
	return false
}
