// Code generated by "enumer -type=GameStatus"; DO NOT EDIT.

package status

import (
	"fmt"
	"strings"
)

const _GameStatusName = "UndecidedVictoryDefeat"

var _GameStatusIndex = [...]uint8{0, 9, 16, 22}

const _GameStatusLowerName = "undecidedvictorydefeat"

func (i GameStatus) String() string {
	if i < 0 || i >= GameStatus(len(_GameStatusIndex)-1) {
		return fmt.Sprintf("GameStatus(%d)", i)
	}
	return _GameStatusName[_GameStatusIndex[i]:_GameStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _GameStatusNoOp() {
	var x [1]struct{}
	_ = x[Undecided-(0)]
	_ = x[Victory-(1)]
	_ = x[Defeat-(2)]
}

var _GameStatusValues = []GameStatus{Undecided, Victory, Defeat}

var _GameStatusNameToValueMap = map[string]GameStatus{
	_GameStatusName[0:9]:        Undecided,
	_GameStatusLowerName[0:9]:   Undecided,
	_GameStatusName[9:16]:       Victory,
	_GameStatusLowerName[9:16]:  Victory,
	_GameStatusName[16:22]:      Defeat,
	_GameStatusLowerName[16:22]: Defeat,
}

var _GameStatusNames = []string{
	_GameStatusName[0:9],
	_GameStatusName[9:16],
	_GameStatusName[16:22],
}

// GameStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GameStatusString(s string) (GameStatus, error) {
	if val, ok := _GameStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _GameStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to GameStatus values", s)
}

// GameStatusValues returns all values of the enum
func GameStatusValues() []GameStatus {
	return _GameStatusValues
}

// GameStatusStrings returns a slice of all String values of the enum
func GameStatusStrings() []string {
	strs := make([]string, len(_GameStatusNames))
	copy(strs, _GameStatusNames)
	return strs
}

// IsAGameStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i GameStatus) IsAGameStatus() bool {
	for _, v := range _GameStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
