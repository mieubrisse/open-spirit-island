// Code generated by "enumer -type=LandType"; DO NOT EDIT.

package island

import (
	"fmt"
	"strings"
)

const _LandTypeName = "InvalidJungleWetlandsDesertMountainOcean"

var _LandTypeIndex = [...]uint8{0, 7, 13, 21, 27, 35, 40}

const _LandTypeLowerName = "invalidjunglewetlandsdesertmountainocean"

func (i LandType) String() string {
	if i < 0 || i >= LandType(len(_LandTypeIndex)-1) {
		return fmt.Sprintf("LandType(%d)", i)
	}
	return _LandTypeName[_LandTypeIndex[i]:_LandTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LandTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[Jungle-(1)]
	_ = x[Wetlands-(2)]
	_ = x[Desert-(3)]
	_ = x[Mountain-(4)]
	_ = x[Ocean-(5)]
}

var _LandTypeValues = []LandType{Invalid, Jungle, Wetlands, Desert, Mountain, Ocean}

var _LandTypeNameToValueMap = map[string]LandType{
	_LandTypeName[0:7]:        Invalid,
	_LandTypeLowerName[0:7]:   Invalid,
	_LandTypeName[7:13]:       Jungle,
	_LandTypeLowerName[7:13]:  Jungle,
	_LandTypeName[13:21]:      Wetlands,
	_LandTypeLowerName[13:21]: Wetlands,
	_LandTypeName[21:27]:      Desert,
	_LandTypeLowerName[21:27]: Desert,
	_LandTypeName[27:35]:      Mountain,
	_LandTypeLowerName[27:35]: Mountain,
	_LandTypeName[35:40]:      Ocean,
	_LandTypeLowerName[35:40]: Ocean,
}

var _LandTypeNames = []string{
	_LandTypeName[0:7],
	_LandTypeName[7:13],
	_LandTypeName[13:21],
	_LandTypeName[21:27],
	_LandTypeName[27:35],
	_LandTypeName[35:40],
}

// LandTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LandTypeString(s string) (LandType, error) {
	if val, ok := _LandTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LandTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LandType values", s)
}

// LandTypeValues returns all values of the enum
func LandTypeValues() []LandType {
	return _LandTypeValues
}

// LandTypeStrings returns a slice of all String values of the enum
func LandTypeStrings() []string {
	strs := make([]string, len(_LandTypeNames))
	copy(strs, _LandTypeNames)
	return strs
}

// IsALandType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LandType) IsALandType() bool {
	for _, v := range _LandTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
